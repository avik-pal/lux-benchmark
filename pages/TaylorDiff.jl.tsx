import Head from 'next/head';
import { Chart, BarController, LineController, Tooltip, Legend, CategoryScale, LinearScale, BarElement, PointElement, LineElement, Colors, LogarithmicScale, Title } from "chart.js";
import { Bar, Line } from "react-chartjs-2";
import useSWR from 'swr';

Chart.register(BarController, LineController, Tooltip, Legend, CategoryScale, LinearScale, BarElement, PointElement, LineElement, Colors, LogarithmicScale, Title );

async function fetchSync<T>(key: string) {
  return await (await fetch(key)).json() as T;
}

type Suite = {
  scalar: G1,
  mlp: G1,
  taylor_expansion: G0,
  pinn: G1
}

const Charts = () => {
  const { data, error } = useSWR('/data?repo=TaylorDiff.jl', async key => await fetchSync<BenchmarkResults>(key));
  if (error || !data) return <div>Error</div>;
  const {
    scalar: { forwarddiff: scalar_fwd, taylordiff: scalar_taylor },
    mlp: { forwarddiff: mlp_f, taylordiff: mlp_t },
    taylor_expansion: { taylordiff, taylorseries },
    pinn: { primal, gradient }
  } = data.benchmarkgroup as Suite;
  console.log(Object.entries(scalar_fwd));
  return <div style={{display: "flex", flexWrap: 'wrap', justifyContent: 'space-around'}}>
    <div className='chart-container'><Line data={{
      labels: Object.keys(scalar_fwd),
      datasets: [
        { data: Object.values(scalar_fwd).map(x => x.time), label: "ForwardDiff" },
        { data: Object.values(scalar_taylor).map(x => x.time), label: "TaylorDiff" }
      ]
    }} options={{
      scales: {
        x: { title: { text: "Differentiation Order", display: true } },
        y: {
          title: { text: "Time / ns", display: true },
          type: 'logarithmic'
        }
      },
      plugins: { title: { text: "Scalar function higher-order derivatives", display: true } }
    }}/></div>
    <div className='chart-container'><Line data={{
      labels: Object.keys(mlp_f),
      datasets: [
        { data: Object.values(mlp_f).map(x => x.time), label: "ForwardDiff" },
        { data: Object.values(mlp_t).map(x => x.time), label: "TaylorDiff" }
      ]
    }} options={{
      scales: {
        x: { title: { text: "Differentiation Order", display: true } },
        y: {
          title: { text: "Time / ns", display: true },
          type: 'logarithmic'
        }
      },
      plugins: { title: { text: "Multi-layer Perceptron higher-order derivatives", display: true } }
    }}/></div>
    <div className='chart-container'><Bar data={{
      labels: ['TaylorDiff.jl', 'TaylorSeries.jl'],
      datasets: [
        { data: [taylordiff.time, taylorseries.time].map(x => x / 1000), label: "Time" }
      ],
    }} options={{
      scales: {
        y: {
          title: { text: "Time / μs", display: true },
        }
      },
      plugins: { title: { text: "Single variable Taylor expansion", display: true } }
    }}/></div>
    <div className='chart-container'><Bar data={{
      labels: ['TaylorDiff.jl', 'Finite Differences'],
      datasets: [
        { data: [primal.taylordiff.time, primal.finitediff.time].map(x => x / 1000), label: "Primal" },
        { data: [gradient.taylordiff.time, gradient.finitediff.time].map(x => x / 1000), label: "Gradient" },
      ],
    }} options={{
      scales: {
        y: {
          title: { text: "Time / μs", display: true },
          type: 'logarithmic',
        }
      },
      plugins: { title: { text: "PINN", display: true } }
    }}/></div>
  </div>
}

export default function TaylorDiff_jl() {
  return <>
    <Head>
      <title>TaylorDiff.jl</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main style={{maxWidth: '1440px', margin: 'auto'}}>
      <h1 style={{textAlign: 'center'}}>TaylorDiff.jl Benchmark Results</h1>
      <Charts />
    </main>
  </>
}